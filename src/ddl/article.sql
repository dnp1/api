CREATE TABLE "user" (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_id       UUID UNIQUE,
  creation_datetime TIMESTAMP DEFAULT current_timestamp
);

CREATE OR REPLACE FUNCTION get_user_id(external_id_ UUID)
  RETURNS BIGINT AS
$$
INSERT INTO "user" ("external_id")
  SELECT external_id_
  WHERE NOT EXISTS(SELECT id
                   FROM "user"
                   WHERE external_id = external_id_);
-- see how it behaves on heavy concurrency
SELECT id
FROM "user"
WHERE external_id = external_id_;
$$ LANGUAGE SQL STRICT;

CREATE TABLE "article" (
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_id       UUID UNIQUE DEFAULT gen_random_uuid() NOT NULL,
  creation_datetime TIMESTAMP DEFAULT current_timestamp,
  active            BOOL DEFAULT FALSE                    NOT NULL
);


CREATE TABLE "article_edition" (
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_id       UUID UNIQUE DEFAULT gen_random_uuid() NOT NULL,
  article_id INT REFERENCES article(id) NOT NULL,
  title VARCHAR(511),
  content BYTEA,
  creation_datetime TIMESTAMP DEFAULT current_timestamp,
  publication_datetime TIMESTAMP NOT NULL
);

CREATE TABLE "article_current_edition" (
  article_id         INT REFERENCES article (id) PRIMARY KEY,
  article_edition_id INT NOT NULL,
  FOREIGN KEY (article_edition_id, article_id) REFERENCES article_edition (id, article_id)
);

CREATE TABLE "tag"(
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(63)  UNIQUE NOT NULL
);

CREATE TABLE "article_tag" (
  article_id INT REFERENCES article(id),
  tag_id INT REFERENCES tag(id),
  PRIMARY KEY (article_id, tag_id)
);


CREATE TABLE "article_comment" (
  id                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_id       UUID UNIQUE DEFAULT gen_random_uuid() NOT NULL,
  creation_datetime TIMESTAMP DEFAULT current_timestamp,
  active            BOOL DEFAULT FALSE                    NOT NULL
)